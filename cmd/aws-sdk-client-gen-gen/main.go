package main

import (
	"bytes"
	"log"
	"os"
	"strings"
	"text/template"

	"github.com/goccy/go-yaml"
)

const templateStr = `// Code generated by cmd/aws-sdk-client-gen-gen/main.go; DO NOT EDIT.
package main

import (
	"reflect"
{{ range $key, $value := .Services }}
	"github.com/aws/aws-sdk-go-v2/service/{{ $key }}"
{{- end }}
)

func generateAll() {
	var err error
{{ range $key, $value := .Services }}
{{- if eq (len $value) 0 }}
	err = gen("{{ $key }}", reflect.TypeOf({{ $key }}.New({{ $key }}.Options{})), nil)
{{- else }}
	err = gen("{{ $key }}", reflect.TypeOf({{ $key }}.New({{ $key }}.Options{})), {{ printf "%#v" $value }})
{{- end }}
	if err != nil {
		panic("failed to generate {{ $key }}" + err.Error())
	}
{{ end }}
}
`

type GenerateConfig struct {
	Services map[string][]string `json:"services"`
}

func main() {
	log.Println("generating gen.go")

	cfg := GenerateConfig{}
	e := os.Getenv("AWS_SDK_CLIENT_GO_GEN")
	if e != "" {
		log.Printf("AWS_SDK_CLIENT_GO_GEN is set, generating services: %s", e)
		services := strings.Split(e, ",")
		cfg.Services = make(map[string][]string, len(services))
		for _, service := range services {
			cfg.Services[service] = nil
		}
	} else {
		log.Printf("AWS_SDK_CLIENT_GO_GEN is not set, reading gen.yaml")
		f, err := os.Open("../../gen.yaml")
		if err != nil {
			log.Fatalf("failed to open gen.yaml: %v", err)
		}
		defer f.Close()
		if err := yaml.NewDecoder(f).Decode(&cfg); err != nil {
			log.Fatalf("failed to decode gen.yaml: %v", err)
		}
	}

	tmpl, err := template.New("gen").Parse(templateStr)
	if err != nil {
		log.Fatalf("failed to parse template: %v", err)
	}
	buf := &bytes.Buffer{}
	if err := tmpl.Execute(buf, cfg); err != nil {
		log.Fatalf("failed to execute template: %v", err)
	}

	if err := os.WriteFile("gen.go", buf.Bytes(), 0644); err != nil {
		log.Fatalf("failed to write gen.go: %v", err)
	}
	log.Println("generated gen.go")
}
